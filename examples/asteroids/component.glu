
#[implicit]
type AddComponent a = { component_name : String }
    
#[derive(Eq, Show)]
type Vec2 = { x : Float, y : Float }

type Position = Vec2

let new_pos x y : Float -> Float -> Position = { x, y }

#[derive(Eq, Show)]
type Motion = { velocity : Vec2, acceleration : Vec2 }

let pos_component : AddComponent Position = { component_name = "Position" }
let motion_component : AddComponent Motion = { component_name = "Motion" }

{
    Position,
    Motion,

    AddComponent,

    eq_Vec2,
    show_Vec2,

    new_pos,
    pos_component,
    motion_component,
}
